// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    flavor = "balanced";
    tapping-term-ms = <170>;
};

&sk {
    quick-release;

    // ignore-modifiers;
};

&sl { release-after-ms = <1500>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 0>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp TAB>;
        };

        combo_return {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RETURN>;
        };

        combo_manager {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&kp LS(LC(ESCAPE))>;
        };

        combo_highlight {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&highlight_macro>;
        };

        combo_toggle1 {
            bindings = <&tog 1>;
            key-positions = <30 31>;
            layers = <0 1 2 3>;
        };

        combo_toggle3 {
            bindings = <&tog 3>;
            key-positions = <32 33>;
            layers = <0 1 2 3>;
        };

        combo_backspace_1 {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
            timeout-ms = <30>;
            layers = <0 1 2 3>;
        };

        combo_delete_2 {
            bindings = <&kp DELETE>;
            key-positions = <12 13>;
            timeout-ms = <30>;
            layers = <0 1 2 3>;
        };

        combo_backspace_2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            layers = <0 1 2 3>;
            timeout-ms = <30>;
        };

        combo_delete_1 {
            bindings = <&kp DELETE>;
            key-positions = <17 18>;
            layers = <0 1 2 3>;
            timeout-ms = <30>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1 2 3>;
        };
    };

    macros {
        cnq_macro: cnq_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LBKT &kp GRAVE &kp RIGHT_BRACKET &kp LEFT_ARROW &kp LEFT_ARROW &kp DOWN_ARROW &kp DOWN_ARROW>;
            label = "CNQ_MACRO";
        };

        highlight_macro: highlight_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "HIGHLIGHT_MACRO";
        };
    };

    behaviors {
        holdtap_comma: holdtap_comma {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_COMMA";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <29>;
            flavor = "hold-preferred";
        };

        holdtap_period: holdtap_period {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_PERIOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <30>;
        };

        holdtap_equal_enter: holdtap_equal_enter {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_EQUAL_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <21>;
        };
    };

     keymap {
                compatible = "zmk,keymap";

		
       		default_layer {
		display-name = "base";
		bindings = <
		&kp Q      &kp W &kp E &kp R &kp T 					&kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A      &kp S &kp D &kp F &kp G 			        	&kp H &kp J  &kp K    &kp L   &kp SEMI
		&mt LSHIFT Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp COMMA &kp DOT &mt RSHIFT SLASH
          				&lt 1 LBKT &kp SPACE  			&kp RET &lt 2 SQT
		>;
		};

       		left_layer {
		display-name = "numb";
		bindings = <
		&kp ESC         &studio_unlock	   &kp N4       &kp F5				&kp LS(N0) &kp N7  &kp N8 &kp N9  &kp N0 
		&kp KP_SLASH    &kp KP_ASTERISK    &kp KP_MINUS      &kp KP_PLUS     &kp RA(GRAVE) 			&kp TAB       &kp N4  &kp N5 &kp N6  &kp COMMA 
		&kp LSHIFT        &kp LCTRL 	   &kp RALT          &kp F11         &kp LA(F4) 			&kp KP_DOT    &kp N1  &kp N2 &kp N3  &kp BSPC 
					    						&trans  &kp SPACE   	&kp RET &none
		>;
		};
		
		right_layer {
		display-name = "symb";
		bindings = <
		&kp GRAVE       &kp LS(N2)  &kp LS(N3)  &kp LS(N6)   &kp LS(N5)		&kp PG_UP    &kp HOME     &kp UP      &kp END       &kp PSCRN 
		&kp LS(GRAVE)   &kp RA(N2)  &kp RA(N3)  &kp NUBS        &kp LS(NUBS)		&kp PG_DN    &kp LEFT     &kp DOWN    &kp RIGHT     &kp BSPC
		&mt LSHIFT EQUAL  &kp LS(EQUAL)  &kp BSLH       &kp LS(MINUS)   &kp LS(N1)    	        &kp RA(LBKT) &kp RA(RBKT) &kp RA(SQT) &kp RA(BSLH)  &kp K_APP
									  &kp CAPS &kp MINUS  	    &kp LC(LA(DEL))  &mo 2 
		>;
		};	
		
		tri_layer {
		display-name = "bl.fn";
		bindings = <
		&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4 			&kp F1   &kp F2   &kp F3        &kp F4      &kp F5
		&kp N1     &kp N1     &kp N1     &kp N1     &kp N1  			&kp F6   &kp F7   &kp F8        &kp F9      &kp F10 
		&kp N1     &bt BT_PRV    &bt BT_CLR    &bt BT_NXT    &kp N1   			&kp F11  &kp F12  &kp K_VOL_DN  &kp K_MUTE  &kp K_VOL_UP   
								&studio_unlock &kp N1  	     &kp N1 &studio_unlock 
		>;
		};	
        
	};
};
